<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Freya&#39;s blog</title>
    <link>gofee.me/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>灵动，洒脱，决然，坚韧</description>
    <pubDate>Sun, 17 Dec 2017 14:06:22 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Mac 音频波形图——播放</title>
      <link>gofee.me/2017/11/20/draw-voice-wave-view-02/</link>
      <guid>gofee.me/2017/11/20/draw-voice-wave-view-02/</guid>
      <pubDate>Mon, 20 Nov 2017 09:55:34 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h3&gt;&lt;p&gt;播放音频的效果图：&lt;/p&gt;
&lt;img src=&quot;/2017/11/20/draw-voice-wave-view-02/playVoice.
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h3><p>播放音频的效果图：</p>
<img src="/2017/11/20/draw-voice-wave-view-02/playVoice.gif" alt="效果图" title="效果图">
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol>
<li>灰色波形底图</li>
<li>播放过程，白色波形覆盖</li>
</ol>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>灰色波形底图是固定的，可直接用图层绘制</p>
<p>1、波形的路径计算与上篇类似</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//波形路径</span></div><div class="line">- (<span class="built_in">CGPathRef</span>)pathWithPoints:(<span class="built_in">NSArray</span> *)points&#123;</div><div class="line">    <span class="built_in">CGFloat</span> midY = <span class="built_in">NSHeight</span>(<span class="keyword">self</span>.bounds) / <span class="number">2.</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> leftX = <span class="built_in">NSMaxX</span>(playBtnRect);</div><div class="line">    </div><div class="line">    <span class="built_in">CGMutablePathRef</span> wavePath = <span class="built_in">CGPathCreateMutable</span>();                 <span class="comment">//绘制路径</span></div><div class="line">    <span class="built_in">CGPathMoveToPoint</span>(wavePath, <span class="literal">nil</span>, leftX, midY);</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; _pointArray.count; i++) &#123;</div><div class="line">        <span class="built_in">NSValue</span> *pointValue = _pointArray[i];</div><div class="line">        <span class="built_in">NSPoint</span> point = pointValue.pointValue;</div><div class="line">        <span class="keyword">if</span> (point.y == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">CGPathMoveToPoint</span>(wavePath, <span class="literal">nil</span>, leftX + i - <span class="number">1</span>, midY);</div><div class="line">            <span class="built_in">CGPathAddLineToPoint</span>(wavePath, <span class="literal">NULL</span>, leftX + i, midY);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">CGPathMoveToPoint</span>(wavePath, <span class="literal">nil</span>, leftX + i, midY);</div><div class="line">            <span class="built_in">CGPathAddLineToPoint</span>(wavePath, <span class="literal">NULL</span>, leftX + i, midY + point.y);</div><div class="line">            <span class="built_in">CGPathMoveToPoint</span>(wavePath, <span class="literal">nil</span>, leftX + i, midY);</div><div class="line">            <span class="built_in">CGPathAddLineToPoint</span>(wavePath, <span class="literal">NULL</span>, leftX + i, midY - point.y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CGPathRef</span> path = <span class="built_in">CGPathCreateCopy</span>(wavePath);</div><div class="line">    <span class="built_in">CGPathRelease</span>(wavePath);</div><div class="line">    <span class="keyword">return</span> path;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>绘制灰色波形</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//添加完整波形图层</span></div><div class="line">- (<span class="keyword">void</span>)addWaveLayerWithPath:(<span class="built_in">CGPathRef</span>)wavePath&#123;</div><div class="line">    <span class="built_in">CAShapeLayer</span> *shapeLayer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    shapeLayer.lineWidth=<span class="number">1</span>;</div><div class="line">    shapeLayer.strokeColor=[<span class="built_in">NSColor</span> lightGrayColor].CGColor;</div><div class="line">    shapeLayer.lineCap = kCALineCapRound;</div><div class="line">    shapeLayer.lineJoin = kCALineJoinRound;</div><div class="line">    [<span class="keyword">self</span>.layer addSublayer:shapeLayer];</div><div class="line">    shapeLayer.path = wavePath;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、播放图层，使用CAShapeLayer实现，CAShapeLayer是唯一一个可动画效果的图层了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//添加播放动画图层</span></div><div class="line">- (<span class="keyword">void</span>)addAnimationLayerWithPath:(<span class="built_in">CGPathRef</span>)path&#123;</div><div class="line">    animationLayer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    animationLayer.path = path;</div><div class="line">    animationLayer.lineWidth = <span class="number">1</span>;</div><div class="line">    animationLayer.strokeColor=[<span class="built_in">NSColor</span> whiteColor].CGColor;</div><div class="line">    animationLayer.lineCap = kCALineCapRound;</div><div class="line">    animationLayer.lineJoin = kCALineJoinRound;</div><div class="line">    [<span class="keyword">self</span>.layer addSublayer:animationLayer];</div><div class="line">    </div><div class="line">    animationLayer.speed = <span class="number">0</span>;   <span class="comment">//禁止动画执行</span></div><div class="line">    animation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"strokeEnd"</span>];</div><div class="line">    animation.duration = _playDuration;</div><div class="line">    animation.fromValue = @(<span class="number">0.0</span>f);</div><div class="line">    animation.toValue = @(<span class="number">1.0</span>f);</div><div class="line">    animation.delegate = <span class="keyword">self</span>;</div><div class="line">    [animationLayer addAnimation:animation forKey:<span class="string">@""</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>animationLayer.speed</code>设为0，即动画速度为0，也就是不执行。</p>
<p><code>@&quot;strokeEnd&quot;</code>是路径的结束点，始于0，止于1，当动画开始执行，就能看到绘制过程了。</p>
<p>3、播放的开始、暂停、继续、停止</p>
<p>对动画的控制，主要是对<code>speed</code> 、<code>timeOffset</code>、<code>beginTime</code>等属性的设置。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)play&#123;</div><div class="line">    [<span class="keyword">self</span> resume];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)pause&#123;</div><div class="line">    _playing = <span class="literal">NO</span>;</div><div class="line">    [<span class="keyword">self</span> setNeedsDisplay:<span class="literal">YES</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">CFTimeInterval</span> pausedTime = [animationLayer convertTime:<span class="built_in">CACurrentMediaTime</span>() fromLayer:<span class="literal">nil</span>];</div><div class="line">    animationLayer.speed = <span class="number">0</span>;</div><div class="line">    animationLayer.timeOffset = pausedTime;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)resume&#123;</div><div class="line">    _playing = <span class="literal">YES</span>;</div><div class="line">    [<span class="keyword">self</span> setNeedsDisplay:<span class="literal">YES</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">CFTimeInterval</span> pausedTime = [animationLayer timeOffset];</div><div class="line">    animationLayer.speed = <span class="number">1.0</span>;</div><div class="line">    animationLayer.timeOffset = <span class="number">0.0</span>;</div><div class="line">    animationLayer.beginTime = <span class="number">0</span>;</div><div class="line">    <span class="built_in">CFTimeInterval</span> timeSincePause = [animationLayer convertTime:<span class="built_in">CACurrentMediaTime</span>() fromLayer:<span class="literal">nil</span>] - pausedTime;</div><div class="line">    animationLayer.beginTime = timeSincePause;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stop&#123;</div><div class="line">    _playing = <span class="literal">NO</span>;</div><div class="line">    [<span class="keyword">self</span> setNeedsDisplay:<span class="literal">YES</span>];</div><div class="line"></div><div class="line">    animationLayer.timeOffset = <span class="number">0</span>;</div><div class="line">    animationLayer.speed = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//动画播放完成后，默认自动removed</span></div><div class="line">    [animationLayer addAnimation:animation forKey:<span class="string">@""</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Demo 地址：<a href="https://github.com/YunFei2015/AudioWaveAnimation.git" target="_blank" rel="external">https://github.com/YunFei2015/AudioWaveAnimation.git</a></p>
]]></content:encoded>
      
      <comments>gofee.me/2017/11/20/draw-voice-wave-view-02/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mac 录制音频，波形图的绘制</title>
      <link>gofee.me/2017/11/08/draw-voice-wave-view/</link>
      <guid>gofee.me/2017/11/08/draw-voice-wave-view/</guid>
      <pubDate>Wed, 08 Nov 2017 14:05:34 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h3&gt;&lt;p&gt;废话不多说，先上效果图。&lt;/p&gt;
&lt;img src=&quot;/2017/11/08/draw-voice-wave-view/animation.
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h3><p>废话不多说，先上效果图。</p>
<img src="/2017/11/08/draw-voice-wave-view/animation.gif" alt="效果图" title="效果图">
<p>上面一闪一闪的大概是没录好吧。🙄</p>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>首先分析这段动画的过程：</p>
<ul>
<li>第一阶段：点击图标后，图标像泡泡一样收缩放大；</li>
<li>第二阶段：图标缩小，同时向下方移动；</li>
<li>第三阶段：波形图绘制，随着数据的增多，波形图向左移动，同时视图的宽度越来越长</li>
<li>第四阶段：视图宽度达到一个阈值后不再增大，波形图继续向左移动，超出左侧范围的部分不再显示。</li>
</ul>
<p>PS. 波形图是上下对称的哦。</p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>首先看动画，前两个阶段的动画有先后顺序，第二阶段的两个动画同时发生，可以用动画组来做。</p>
<p>然后，第二、第三阶段之间的节点，可以看到图标刚好缩小到波形视图的高度后，波形视图出现，如果分为两个视图，总有一个生硬的过渡过程，为了达到一个流畅的视觉效果，可以使用一个视图来做。</p>
<p>最后，仔细看波形图，新数据是从右侧进入的，由于这是个录音的过程，因此数据是在不断增多的，可以用实时绘图来实现。</p>
<p>接下来上自定义 button 的代码。</p>
<ul>
<li><p>第一阶段 ~ 第二阶段</p>
<figure class="highlight objc"><figcaption><span>VoiceRecordButton.m </span></figcaption><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startAnimation&#123;</div><div class="line">    <span class="keyword">self</span>.enabled = <span class="literal">NO</span>;  <span class="comment">//动画过程中禁用</span></div><div class="line">    [<span class="keyword">self</span> moveAnchorPointToCenter];   <span class="comment">//将锚点移到中心 (为了达到围绕中心缩放的效果)</span></div><div class="line">    </div><div class="line">    <span class="comment">//放大</span></div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> *scaleToBigAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">    scaleToBigAnimation.values = @[@(<span class="number">1.0</span>), @(<span class="number">.7</span>f), @(<span class="number">1.</span>f), @(<span class="number">1.3</span>f), @(<span class="number">1.7</span>f)];   <span class="comment">//先从1.0缩小到0.7，再放大到1.7，这样就实现了泡泡效果</span></div><div class="line">    scaleToBigAnimation.duration = <span class="number">0.5</span>;</div><div class="line">    scaleToBigAnimation.beginTime = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//缩小</span></div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> *scaleAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">    scaleAnimation.values = @[@(<span class="number">1.7</span>f), @(<span class="number">1</span>)];</div><div class="line">    scaleAnimation.duration = <span class="number">0.75</span>;</div><div class="line">    scaleAnimation.beginTime = scaleToBigAnimation.beginTime + scaleToBigAnimation.duration;</div><div class="line">    </div><div class="line">    <span class="comment">//位置下移，与缩小动画同时进行</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *positionAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"position.y"</span>];</div><div class="line">    positionAnimation.toValue = @(<span class="keyword">self</span>.layer.position.y - <span class="built_in">NSWidth</span>(<span class="keyword">self</span>.frame));</div><div class="line">    positionAnimation.duration = scaleAnimation.duration;</div><div class="line">    positionAnimation.beginTime = scaleAnimation.beginTime;</div><div class="line">    </div><div class="line">    <span class="comment">//添加动画组</span></div><div class="line">    <span class="built_in">CAAnimationGroup</span> *animationGroup = [<span class="built_in">CAAnimationGroup</span> animation];</div><div class="line">    animationGroup.delegate = <span class="keyword">self</span>;</div><div class="line">    animationGroup.duration = scaleToBigAnimation.duration + positionAnimation.duration;</div><div class="line">    [animationGroup setValue:<span class="string">@"animationGroup"</span> forKey:<span class="string">@"AnimationKey"</span>];</div><div class="line">    animationGroup.animations = @[scaleToBigAnimation, scaleAnimation, positionAnimation];</div><div class="line">    [<span class="keyword">self</span>.layer addAnimation:animationGroup forKey:<span class="string">@"animationGroup"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>VoiceRecordButton.m</span></figcaption><table><tr><td class="code"><pre><div class="line">- (void)moveAnchorPointToCenter&#123;</div><div class="line">    //由于图层锚点默认是在原点(0,0)，需要让图层围绕中心点缩放</div><div class="line">    self.layer.anchorPoint = CGPointMake(0.5, 0.5);</div><div class="line">    </div><div class="line">    //锚点改变后，为了让图层随着视图移动，将图层的位置也改到锚点的位置</div><div class="line">    NSRect rect = self.frame;</div><div class="line">    CGFloat centerX = rect.origin.x + rect.size.width / 2.f;</div><div class="line">    CGFloat centerY = rect.origin.y + rect.size.height / 2.f;</div><div class="line">    self.layer.position = CGPointMake(centerX, centerY);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)resumeAnchorPoint&#123;</div><div class="line">    self.layer.anchorPoint = CGPointZero;</div><div class="line">    self.layer.position = self.frame.origin;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>动画结束后，在代理里触发下一步操作。</p>
<figure class="highlight plain"><figcaption><span>VoiceRecordButton.m</span></figcaption><table><tr><td class="code"><pre><div class="line">#pragma mark - CAAnimation delegate</div><div class="line">- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag&#123;</div><div class="line">    if (flag) &#123;</div><div class="line">        if ([self.delegate respondsToSelector:@selector(voiceRecordingWillBegin)]) &#123;</div><div class="line">          	//执行代理方法，准备数据</div><div class="line">            [self.delegate voiceRecordingWillBegin];</div><div class="line">        &#125;</div><div class="line">        [self resumeAnchorPoint];</div><div class="line">        [self startRecording];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>第三阶段 ~ 第四阶段</p>
<p>本文 demo 里所有的音频数据都是随机生成的模拟数据，也没有实现真正的录音哈。</p>
<p>控制器在 voiceRecordingWillBegin 这个方法里，准备需要绘制的数据。</p>
<figure class="highlight objc"><figcaption><span>ViewController.m</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark - voice recording button delegate</span></div><div class="line"><span class="comment">//录音即将开始</span></div><div class="line">- (<span class="keyword">void</span>)voiceRecordingWillBegin&#123;</div><div class="line">  	<span class="comment">//之前的动画只是图层动画，图层已经到了目标位置，但视图的 frame 还在原来的位置，因此要修改视图的位置和尺寸</span></div><div class="line">    <span class="built_in">NSRect</span> frame = <span class="keyword">self</span>.voiceRecordBtn.frame;</div><div class="line">    <span class="built_in">CGFloat</span> centerX = frame.origin.x + frame.size.width / <span class="number">2.</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> centerY = frame.origin.y + frame.size.height / <span class="number">2.</span>f - frame.size.height;</div><div class="line">    frame.size.width = <span class="number">400</span>; <span class="comment">//这是蓝色波形图的最大宽度</span></div><div class="line">    frame.origin.x = centerX - frame.size.width / <span class="number">2.</span>f;</div><div class="line">    frame.origin.y = centerY - frame.size.height / <span class="number">2.</span>f;</div><div class="line">    <span class="keyword">self</span>.voiceRecordBtn.frame = frame;</div><div class="line">    </div><div class="line">  	<span class="comment">//添加计时器，构造模拟数据</span></div><div class="line">    [<span class="keyword">self</span> addTimer];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addTimer&#123;</div><div class="line">    <span class="comment">//添加定时器</span></div><div class="line">    _timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">.1</span>f target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(addPoint) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line"></div><div class="line">    [[<span class="built_in">NSRunLoop</span> mainRunLoop] addTimer:_timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addPoint</div><div class="line">&#123;</div><div class="line">    <span class="comment">//随机点</span></div><div class="line">     <span class="built_in">NSPoint</span> point = <span class="built_in">NSMakePoint</span>(<span class="keyword">self</span>.voiceRecordBtn.bounds.size.height / <span class="number">2.</span>f, arc4random_uniform(<span class="built_in">NSHeight</span>(<span class="keyword">self</span>.voiceRecordBtn.frame) / <span class="number">4.</span>f) + <span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//插入到数组（动画视图最右边），array添加CGPoint需要转换一下</span></div><div class="line"><span class="comment">//    [self.pointArray insertObject:[NSValue valueWithPoint:point] atIndex:0];</span></div><div class="line">    [<span class="keyword">self</span>.pointArray addObject:[<span class="built_in">NSValue</span> valueWithPoint:point]];</div><div class="line">    </div><div class="line">    <span class="comment">//传值，重绘视图</span></div><div class="line">    <span class="keyword">self</span>.voiceRecordBtn.pointArray = <span class="keyword">self</span>.pointArray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>回到自定义按钮的.m 文件</p>
<p>点数组的 setter 方法</p>
<figure class="highlight objc"><figcaption><span>VoiceRecordButton.m</span></figcaption><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setPointArray:(<span class="built_in">NSArray</span> *)pointArray&#123;</div><div class="line">    _pointArray = pointArray;</div><div class="line">    [<span class="keyword">self</span> setNeedsDisplay:<span class="literal">YES</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>开始录音</p>
<figure class="highlight plain"><figcaption><span>VoiceRecordButton.m</span></figcaption><table><tr><td class="code"><pre><div class="line">- (void)startRecording&#123;</div><div class="line">    self.talking = YES;</div><div class="line">    [self setNeedsDisplay:YES];</div><div class="line">    </div><div class="line">    //延迟_recordingDuration执行，若没有手动停止，则自动停止录音</div><div class="line">    [self performSelector:@selector(stopRecording) withObject:nil afterDelay:_recordingDuration];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>停止录音</p>
<figure class="highlight plain"><figcaption><span>VoiceRecordButton.m</span></figcaption><table><tr><td class="code"><pre><div class="line">- (void)stopRecording&#123;</div><div class="line">    //取消延迟执行</div><div class="line">    [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(stopRecording) object:nil];</div><div class="line">    </div><div class="line">    self.enabled = YES;</div><div class="line">    self.frame = self.initialFrame; //录音结束后，按钮回到点击前的初始状态</div><div class="line">    self.talking = NO;</div><div class="line">    </div><div class="line">    [self setNeedsDisplay:YES];</div><div class="line">    </div><div class="line">    if ([self.delegate respondsToSelector:@selector(voiceRecordingDidFinish)]) &#123;</div><div class="line">        [self.delegate voiceRecordingDidFinish];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是重头戏了，每次调用<code>[self setNeedsDisplay:YES]</code>方法时，系统会自动调用<code>drawRect:(NSRect)dirtyRect</code> 方法，我们在这个方法里绘制数据。</p>
<figure class="highlight objc"><figcaption><span>VoiceRecordButton.m</span></figcaption><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">NSRect</span>)dirtyRect&#123;</div><div class="line">    [<span class="keyword">super</span> drawRect:dirtyRect];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.talking) &#123;</div><div class="line">        <span class="comment">//现在没有在录音，即初始状态</span></div><div class="line">        <span class="built_in">NSBezierPath</span> *rectPath = [<span class="built_in">NSBezierPath</span> bezierPathWithOvalInRect:dirtyRect];</div><div class="line">        [[<span class="built_in">NSColor</span> blueColor] setFill];</div><div class="line">        [rectPath fill];</div><div class="line">        </div><div class="line">        <span class="built_in">NSImage</span> *image = [<span class="built_in">NSImage</span> imageNamed:<span class="string">@"SideAudio"</span>];</div><div class="line">        [image drawInRect:dirtyRect];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">CGFloat</span> midY = <span class="built_in">NSHeight</span>(dirtyRect) / <span class="number">2.</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> midX = <span class="built_in">NSWidth</span>(dirtyRect) / <span class="number">2.</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> leftX = midX - _pointArray.count / <span class="number">2.</span>f - _initialWidth / <span class="number">2.</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> rightX = midX + _pointArray.count / <span class="number">2.</span>f + _initialWidth / <span class="number">2.</span>f;</div><div class="line">    </div><div class="line">    <span class="comment">// Drawing code here.</span></div><div class="line">    <span class="built_in">CGContextRef</span> ctx = [[<span class="built_in">NSGraphicsContext</span> currentContext] graphicsPort];</div><div class="line">    </div><div class="line">    <span class="comment">//绘制初始线型，模拟一般录音场景，刚开始可能没有说话，一条横线</span></div><div class="line">    <span class="built_in">CGMutablePathRef</span> linePath = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line">    <span class="built_in">CGPathMoveToPoint</span>(linePath, <span class="literal">nil</span>, leftX, midY);</div><div class="line">    <span class="built_in">CGPathAddLineToPoint</span>(linePath, <span class="literal">nil</span>, leftX + _initialWidth, midY);	<span class="comment">//_initialWidth 横线的宽度，这里给了个固定值</span></div><div class="line">    <span class="built_in">CGContextAddPath</span>(ctx, linePath);</div><div class="line">    </div><div class="line">    <span class="comment">//绘制上半部分波形</span></div><div class="line">    <span class="built_in">CGMutablePathRef</span> halfPath = <span class="built_in">CGPathCreateMutable</span>();                 <span class="comment">//绘制路径</span></div><div class="line">    <span class="built_in">CGPathMoveToPoint</span>(halfPath, <span class="literal">nil</span>, <span class="built_in">NSWidth</span>(dirtyRect), midY);</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; _pointArray.count; i++) &#123;</div><div class="line">        <span class="built_in">NSValue</span> *pointValue = _pointArray[i];</div><div class="line">        <span class="built_in">NSPoint</span> point = pointValue.pointValue;</div><div class="line">        <span class="built_in">NSInteger</span> j = _pointArray.count - i - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (point.y == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">CGPathMoveToPoint</span>(halfPath, <span class="literal">nil</span>, rightX - j + <span class="number">1</span>, midY);</div><div class="line">            <span class="built_in">CGPathAddLineToPoint</span>(halfPath, <span class="literal">NULL</span>, rightX - j, midY);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">CGPathMoveToPoint</span>(halfPath, <span class="literal">nil</span>, rightX - j, midY);</div><div class="line">            <span class="built_in">CGPathAddLineToPoint</span>(halfPath, <span class="literal">NULL</span>, rightX - j, midY + point.y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//实现波形图反转</span></div><div class="line">    <span class="built_in">CGMutablePathRef</span> fullPath = <span class="built_in">CGPathCreateMutable</span>();<span class="comment">//创建新路径</span></div><div class="line">    <span class="built_in">CGPathAddPath</span>(fullPath, <span class="literal">NULL</span>, halfPath);          <span class="comment">//合并路径</span></div><div class="line">    <span class="built_in">CGAffineTransform</span> transform = <span class="built_in">CGAffineTransformIdentity</span>; <span class="comment">//反转</span></div><div class="line">    <span class="comment">//反转配置</span></div><div class="line">    transform = <span class="built_in">CGAffineTransformTranslate</span>(transform, <span class="number">0</span>, <span class="built_in">NSHeight</span>(dirtyRect));</div><div class="line">    transform = <span class="built_in">CGAffineTransformScale</span>(transform, <span class="number">1.0</span>, <span class="number">-1.0</span>);</div><div class="line">    <span class="built_in">CGPathAddPath</span>(fullPath, &amp;transform, halfPath);</div><div class="line">    </div><div class="line">    <span class="comment">//将路径添加到上下文中</span></div><div class="line">    <span class="built_in">CGContextAddPath</span>(ctx, fullPath);</div><div class="line">    </div><div class="line">    <span class="comment">//绘制矩形区域，即不断变长的蓝色背景</span></div><div class="line">    <span class="built_in">CGMutablePathRef</span> rectPath = <span class="built_in">CGPathCreateMutable</span>();</div><div class="line">    <span class="built_in">CGPathMoveToPoint</span>(rectPath, <span class="literal">nil</span>, leftX, <span class="number">0</span>);</div><div class="line">    <span class="built_in">CGPathAddRoundedRect</span>(rectPath, <span class="literal">nil</span>, <span class="built_in">CGRectMake</span>(leftX, <span class="number">0</span>, _pointArray.count + _initialWidth, <span class="built_in">NSHeight</span>(dirtyRect)), <span class="built_in">NSHeight</span>(dirtyRect) / <span class="number">2.</span>f, <span class="built_in">NSHeight</span>(dirtyRect) / <span class="number">2.</span>f);</div><div class="line">    <span class="built_in">CGContextAddPath</span>(ctx, rectPath);</div><div class="line">    </div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">1</span>);</div><div class="line">    <span class="built_in">CGContextSetStrokeColorWithColor</span>(ctx, [<span class="built_in">NSColor</span> whiteColor].CGColor);</div><div class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(ctx, [<span class="built_in">NSColor</span> blueColor].CGColor);</div><div class="line">    <span class="built_in">CGContextDrawPath</span>(ctx, kCGPathFillStroke);</div><div class="line">    </div><div class="line">    <span class="comment">//移除</span></div><div class="line">    <span class="built_in">CGPathRelease</span>(halfPath);</div><div class="line">    <span class="built_in">CGPathRelease</span>(fullPath);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>结束，明天放播放录音的动画实现。</p>
<p>Demo 地址：<a href="https://github.com/YunFei2015/AudioWaveAnimation.git" target="_blank" rel="external">https://github.com/YunFei2015/AudioWaveAnimation.git</a></p>
]]></content:encoded>
      
      <comments>gofee.me/2017/11/08/draw-voice-wave-view/#disqus_thread</comments>
    </item>
    
    <item>
      <title>关于storyboard不得不说的事</title>
      <link>gofee.me/2017/05/05/storyboard-loading/</link>
      <guid>gofee.me/2017/05/05/storyboard-loading/</guid>
      <pubDate>Fri, 05 May 2017 03:39:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;自 iOS 5 时代苹果推出 Storyboard（以下简称SB）以来，关于使用代码手写 UI、SB 和 xib 之间的争论就一直存在。问题主要在于 Storyboard 的加载过程是否会影响性能，下面就分析一下 Storyboard 中的 ViewController 是
      
      </description>
      
      <content:encoded><![CDATA[<p>自 iOS 5 时代苹果推出 Storyboard（以下简称SB）以来，关于使用代码手写 UI、SB 和 xib 之间的争论就一直存在。问题主要在于 Storyboard 的加载过程是否会影响性能，下面就分析一下 Storyboard 中的 ViewController 是怎么加载出来的。</p>
<p>细心的同学会发现，在编译的时候 Xcode 有个 Compiling Storyboard files 的过程。编译过程中，项目里用到的 SB 文件也会被编译，并以 <code>.storyboarc</code> 为扩展名最终保存在 APP 包内。<code>.storyboardc</code> 是一个文件夹，里面保存了描述编译后的 SB 信息的 <code>Info.plist</code> 文件，以及一系列 <code>.nib</code> 文件。原来的 SB 中的每个对象（也就是每个 ViewController）将会被编译成一个单独的 <code>.nib</code>，<code>.nib</code> 中包含了编码后的对应的对象层级。在加载一个 SB，并从中读取 ViewController 类型和 nib 的关系，来完成 <code>UIStoryboard</code> 的初始化。接下来读取某个 nib，并使用<code>UINibDecoder</code> 进行解码，将 nib 二进制还原为实际的对象，最后调用该对象的 <code>initWithCoder：</code> 完成各个属性的解码。最后，调用 <code>awakeFromNib</code> 方法，来通知开发者从 nib 的加载已经完毕。</p>
<img src="/2017/05/05/storyboard-loading/storyboard的加载过程.png" alt="Storyboard 的加载过程" title="Storyboard 的加载过程">
<p>可以看出，从只有一个 ViewController 的 SB 中加载这个 VC，与从有多个 ViewController 的 SB 中加载的情况，速度上并不会有什么区别。</p>
<p>原文： <a href="https://onevcat.com/2017/04/storyboard-argue/" target="_blank" rel="external">再看关于 Storyboard 的一些争论</a></p>
]]></content:encoded>
      
      <comments>gofee.me/2017/05/05/storyboard-loading/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AFNetworking README 中文版</title>
      <link>gofee.me/2017/01/25/AFNetworking-translate/</link>
      <guid>gofee.me/2017/01/25/AFNetworking-translate/</guid>
      <pubDate>Wed, 25 Jan 2017 12:23:15 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;AFNetworking-README-中文版&quot;&gt;&lt;a href=&quot;#AFNetworking-README-中文版&quot; class=&quot;headerlink&quot; title=&quot;AFNetworking README 中文版&quot;&gt;&lt;/a&gt;AFNetworking READ
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="AFNetworking-README-中文版"><a href="#AFNetworking-README-中文版" class="headerlink" title="AFNetworking README 中文版"></a>AFNetworking README 中文版</h1><p>AFNetworking是iOS和Mac OS X平台上的轻量级网络库，在Foudation URL加载系统基础上构建，对构建于Cocoa的强大高级的网络抽象进行了扩充。它具有设计良好的、富有特性的、模块化结构的API接口集。</p>
<h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><h3 id="NSURLSession-会话"><a href="#NSURLSession-会话" class="headerlink" title="NSURLSession 会话"></a>NSURLSession 会话</h3><ul>
<li>AFURLSessionManager</li>
<li>AFHTTPSessionManager</li>
</ul>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><ul>
<li><code>&lt;AFURLRequestSerialization&gt;</code><ul>
<li>AFHTTPRequestSerializer</li>
<li>AFJSONRequestSerializer</li>
<li>AFPropertyListRequestSerializer</li>
</ul>
</li>
<li><code>&lt;AFURLResponseSerialization&gt;</code><ul>
<li>AFHTTPResponseSerializer</li>
<li>AFJSONResponseSerializer</li>
<li>AFXMLParserResponseSerializer</li>
<li>AFXMLDocumentResponseSerializer(Mac OS X)</li>
<li>AFPropertyListResponseSerializer</li>
<li>AFImageResponseSerializer</li>
<li>AFCompoundResponseSerializer</li>
</ul>
</li>
</ul>
<h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><ul>
<li>AFSecurityPolicy</li>
<li>AFNetworkReachabilityManager</li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="AFURLSessionManager"><a href="#AFURLSessionManager" class="headerlink" title="AFURLSessionManager"></a>AFURLSessionManager</h3><p><code>AFURLSessionManager</code>在一个定义好的<code>NSURLSessionConfiguration</code>对象基础上创建并管理一个<code>NSURLSession</code>对象, <code>NSURLSessionConfiguration</code>遵循<code>&lt;NSURLSessionTaskDelegate&gt;</code>, <code>&lt;NSURLSessionDataDelegate&gt;</code>, <code>&lt;NSURLSessionDownloadDelegate&gt;</code>, <code>&lt;NSURLSessionDelegate&gt;</code>协议.</p>
<h4 id="创建一个下载任务"><a href="#创建一个下载任务" class="headerlink" title="创建一个下载任务"></a>创建一个下载任务</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class="line">AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];</div><div class="line"><span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://example.com/download.zip"</span>];</div><div class="line"><span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:URL];</div><div class="line"><span class="built_in">NSURLSessionDownloadTask</span> *downloadTask = [manager downloadTaskWithRequest:request progress:<span class="literal">nil</span> destination:^<span class="built_in">NSURL</span> *(<span class="built_in">NSURL</span> *targetPath, <span class="built_in">NSURLResponse</span> *response) &#123;</div><div class="line">    <span class="built_in">NSURL</span> *documentsDirectoryURL = [[<span class="built_in">NSFileManager</span> defaultManager] URLForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomain:<span class="built_in">NSUserDomainMask</span> appropriateForURL:<span class="literal">nil</span> create:<span class="literal">NO</span> error:<span class="literal">nil</span>];</div><div class="line">    <span class="keyword">return</span> [documentsDirectoryURL URLByAppendingPathComponent:[response suggestedFilename]];</div><div class="line">&#125; completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSURL</span> *filePath, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"File downloaded to: %@"</span>, filePath);</div><div class="line">&#125;];</div><div class="line">[downloadTask resume];</div></pre></td></tr></table></figure>
<h4 id="创建一个上传任务"><a href="#创建一个上传任务" class="headerlink" title="创建一个上传任务"></a>创建一个上传任务</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class="line">AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];</div><div class="line"><span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://example.com/upload"</span>];</div><div class="line"><span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:URL];</div><div class="line"><span class="built_in">NSURL</span> *filePath = [<span class="built_in">NSURL</span> fileURLWithPath:<span class="string">@"file://path/to/image.png"</span>];</div><div class="line"><span class="built_in">NSURLSessionUploadTask</span> *uploadTask = [manager uploadTaskWithRequest:request fromFile:filePath progress:<span class="literal">nil</span> completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> responseObject, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">    <span class="keyword">if</span> (error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Error: %@"</span>, error);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Success: %@ %@"</span>, response, responseObject);</div><div class="line">    &#125;</div><div class="line">&#125;];</div><div class="line">[uploadTask resume];</div></pre></td></tr></table></figure>
<h4 id="创建一个多表单请求的上传任务，带进度条"><a href="#创建一个多表单请求的上传任务，带进度条" class="headerlink" title="创建一个多表单请求的上传任务，带进度条"></a>创建一个多表单请求的上传任务，带进度条</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSMutableURLRequest</span> *request = [[AFHTTPRequestSerializer serializer] multipartFormRequestWithMethod:<span class="string">@"POST"</span> URLString:<span class="string">@"http://example.com/upload"</span> parameters:<span class="literal">nil</span> constructingBodyWithBlock:^(<span class="keyword">id</span>&lt;AFMultipartFormData&gt; formData) &#123;</div><div class="line">        [formData appendPartWithFileURL:[<span class="built_in">NSURL</span> fileURLWithPath:<span class="string">@"file://path/to/image.jpg"</span>] name:<span class="string">@"file"</span> fileName:<span class="string">@"filename.jpg"</span> mimeType:<span class="string">@"image/jpeg"</span> error:<span class="literal">nil</span>];</div><div class="line">    &#125; error:<span class="literal">nil</span>];</div><div class="line">AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</div><div class="line"><span class="built_in">NSURLSessionUploadTask</span> *uploadTask;</div><div class="line">uploadTask = [manager</div><div class="line">              uploadTaskWithStreamedRequest:request</div><div class="line">              progress:^(<span class="built_in">NSProgress</span> * _Nonnull uploadProgress) &#123;</div><div class="line">                  <span class="comment">// This is not called back on the main queue.</span></div><div class="line">                  <span class="comment">// You are responsible for dispatching to the main queue for UI updates</span></div><div class="line">                  <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                      <span class="comment">//Update the progress view</span></div><div class="line">                      [progressView setProgress:uploadProgress.fractionCompleted];</div><div class="line">                  &#125;);</div><div class="line">              &#125;</div><div class="line">              completionHandler:^(<span class="built_in">NSURLResponse</span> * _Nonnull response, <span class="keyword">id</span>  _Nullable responseObject, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">                  <span class="keyword">if</span> (error) &#123;</div><div class="line">                      <span class="built_in">NSLog</span>(<span class="string">@"Error: %@"</span>, error);</div><div class="line">                  &#125; <span class="keyword">else</span> &#123;</div><div class="line">                      <span class="built_in">NSLog</span>(<span class="string">@"%@ %@"</span>, response, responseObject);</div><div class="line">                  &#125;</div><div class="line">              &#125;];</div><div class="line">[uploadTask resume];</div></pre></td></tr></table></figure>
<h4 id="创建一个数据任务"><a href="#创建一个数据任务" class="headerlink" title="创建一个数据任务"></a>创建一个数据任务</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class="line">AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];</div><div class="line"><span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://httpbin.org/get"</span>];</div><div class="line"><span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:URL];</div><div class="line"><span class="built_in">NSURLSessionDataTask</span> *dataTask = [manager dataTaskWithRequest:request completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> responseObject, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">    <span class="keyword">if</span> (error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Error: %@"</span>, error);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ %@"</span>, response, responseObject);</div><div class="line">    &#125;</div><div class="line">&#125;];</div><div class="line">[dataTask resume];</div></pre></td></tr></table></figure>
<hr>
<h3 id="请求序列化"><a href="#请求序列化" class="headerlink" title="请求序列化"></a>请求序列化</h3><p>请求序列化器通过将参数编码为字符串或HTTP请求体，结合URL字符串创建一个请求。</p>
<h4 id="字符串格式的参数编码"><a href="#字符串格式的参数编码" class="headerlink" title="字符串格式的参数编码"></a>字符串格式的参数编码</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[AFHTTPRequestSerializer serializer] requestWithMethod:<span class="string">@"GET"</span> URLString:URLString parameters:parameters error:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<blockquote>
<p>GET <a href="http://example.com?foo=bar&amp;baz[]=1&amp;baz[]=2&amp;baz[]=3" target="_blank" rel="external">http://example.com?foo=bar&amp;baz[]=1&amp;baz[]=2&amp;baz[]=3</a></p>
</blockquote>
<h4 id="URL格式的参数编码"><a href="#URL格式的参数编码" class="headerlink" title="URL格式的参数编码"></a>URL格式的参数编码</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[AFHTTPRequestSerializer serializer] requestWithMethod:<span class="string">@"POST"</span> URLString:URLString parameters:parameters error:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<blockquote>
<p>POST <a href="http://example.com/" target="_blank" rel="external">http://example.com/</a><br>Content-Type: application/x-www-form-urlencoded<br>foo=bar&amp;baz[]=1&amp;baz[]=2&amp;baz[]=3</p>
</blockquote>
<h4 id="JSON格式的参数编码"><a href="#JSON格式的参数编码" class="headerlink" title="JSON格式的参数编码"></a>JSON格式的参数编码</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[AFJSONRequestSerializer serializer] requestWithMethod:<span class="string">@"POST"</span> URLString:URLString parameters:parameters error:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<blockquote>
<p>POST <a href="http://example.com/" target="_blank" rel="external">http://example.com/</a><br>Content-Type: application/json<br>{“foo”: “bar”, “baz”: [1,2,3]}</p>
</blockquote>
<h3 id="网络可达性管理"><a href="#网络可达性管理" class="headerlink" title="网络可达性管理"></a>网络可达性管理</h3><p>AFNetworkReachabilityManager监控WWAN和WiFi的网络可达性。</p>
<ul>
<li>不要使用Reachability决定是否发送原始请求；<ul>
<li>应该尝试重发。</li>
</ul>
</li>
<li>可以使用Reachability决定一个请求在什么时候自动重发；<ul>
<li>虽然可能请求失败，但一个网络可达的Reachability通知是重新请求某些事物的好时候。</li>
</ul>
</li>
<li>网络可达管理器是个很有用的工具，可以确定一个请求为什么失败。<ul>
<li>一个网络请求失败后，通知用户“断线了”，比返回“请求超时”这种更技术更精确的错误要好。</li>
</ul>
</li>
</ul>
<p>参考 <a href="https://developer.apple.com/videos/play/wwdc2012-706/" target="_blank" rel="external">WWDC 2012 session 706, “Networking Best Practices.”</a>.</p>
<h4 id="共享的网络可达性管理器"><a href="#共享的网络可达性管理器" class="headerlink" title="共享的网络可达性管理器"></a>共享的网络可达性管理器</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Reachability: %@"</span>, AFStringFromNetworkReachabilityStatus(status));</div><div class="line">&#125;];</div><div class="line">[[AFNetworkReachabilityManager sharedManager] startMonitoring];</div></pre></td></tr></table></figure>
<h3 id="安全策略"><a href="#安全策略" class="headerlink" title="安全策略"></a>安全策略</h3><p>在你的APP里添加pinned X.509证书会帮你避免人为攻击和其他漏洞扫描。当应用处理敏感的用户数据或金融信息时，非常需要在具有SSL证书的HTTPS连接中执行所有操作。</p>
<p>####允许无效SSL证书</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">manager.securityPolicy.allowInvalidCertificates = <span class="literal">YES</span>; <span class="comment">// not recommended for production</span></div></pre></td></tr></table></figure>
]]></content:encoded>
      
      <comments>gofee.me/2017/01/25/AFNetworking-translate/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 Face++ 实现人脸识别</title>
      <link>gofee.me/2016/11/30/face-recognition-02/</link>
      <guid>gofee.me/2016/11/30/face-recognition-02/</guid>
      <pubDate>Wed, 30 Nov 2016 09:37:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;上次讲了如何&lt;a href=&quot;/2016/11/22/face-recognition-01/&quot; title=&quot;使用Face++实现人脸搜索&quot;&gt;使用Face++实现人脸搜索&lt;/a&gt;，这次我们来谈谈面部识别的实现方法。&lt;/p&gt;
&lt;h3 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效
      
      </description>
      
      <content:encoded><![CDATA[<p>上次讲了如何<a href="/2016/11/22/face-recognition-01/" title="使用Face++实现人脸搜索">使用Face++实现人脸搜索</a>，这次我们来谈谈面部识别的实现方法。</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><img src="/2016/11/30/face-recognition-02/人脸识别.gif" alt="效果图" title="效果图">
<p>将Face++集成到项目中详细步骤请参考<a href="/2016/11/22/face-recognition-01/" title="使用 Face++实现人脸搜索">使用 Face++实现人脸搜索</a>第一部分。</p>
<h4 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a>开始工作</h4><h5 id="1-声明属性变量"><a href="#1-声明属性变量" class="headerlink" title="1. 声明属性变量"></a>1. 声明属性变量</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIImage</span> personImg;<span class="comment">//人物图像</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) IBOutletUIImageView *imgView;</div></pre></td></tr></table></figure>
<h5 id="2-从本地相册选取图片"><a href="#2-从本地相册选取图片" class="headerlink" title="2. 从本地相册选取图片"></a>2. 从本地相册选取图片</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UIImagePickerController</span> *picker = [[<span class="built_in">UIImagePickerController</span> alloc] init]; </div><div class="line">picker.sourceType = <span class="built_in">UIImagePickerControllerSourceTypePhotoLibrary</span>; picker.delegate = <span class="keyword">self</span>; </div><div class="line">[<span class="keyword">self</span> presentViewController:picker animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<h5 id="3-选择图片后，进行面部识别"><a href="#3-选择图片后，进行面部识别" class="headerlink" title="3. 选择图片后，进行面部识别"></a>3. 选择图片后，进行面部识别</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)imagePickerController:(<span class="built_in">UIImagePickerController</span> *)picker didFinishPickingMediaWithInfo:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="keyword">id</span>&gt; *)info&#123;</div><div class="line">    _personImg = info[<span class="built_in">UIImagePickerControllerOriginalImage</span>];</div><div class="line">    [_imgView updateH:_imgView.width / (_personImg.size.width / _personImg.size.height)];<span class="comment">//按原比例更新视图宽高，类别方法，此处就不赘述了</span></div><div class="line">    _imgView.image = _personImg;</div><div class="line">    <span class="built_in">NSData</span> *data = <span class="built_in">UIImageJPEGRepresentation</span>(_personImg, <span class="number">1</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//进行人脸识别，由于耗费时间较长，最好异步执行</span></div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        FaceppResult *result = [[FaceppAPI detection] detectWithURL:<span class="literal">nil</span> orImageData:data mode:FaceppDetectionModeOneFace attribute:FaceppDetectionAttributeAll tag:<span class="literal">nil</span> async:<span class="literal">NO</span> others:<span class="literal">nil</span>];</div><div class="line">        <span class="comment">//回到主线程更新UI</span></div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            [<span class="keyword">self</span> didFinishDetection:result];</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    [picker dismissViewControllerAnimated:<span class="literal">YES</span> completion:^&#123;</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>result返回值说明，JSON示例</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">&#123;<span class="string">"face"</span>: [</div><div class="line">    &#123;<span class="string">"attribute"</span>: &#123;</div><div class="line">        <span class="string">"age"</span>: &#123;<span class="comment">//包含年龄分析结果，value的值为一个非负整数表示估计的年龄, range表示估计年龄的正负区间</span></div><div class="line">            <span class="string">"range"</span>: <span class="number">5</span>,</div><div class="line">            <span class="string">"value"</span>: <span class="number">14</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"gender"</span>: &#123;<span class="comment">//包含性别分析结果，value的值为Male/Female, confidence表示置信度</span></div><div class="line">            <span class="string">"confidence"</span>: <span class="number">99.9981</span>,</div><div class="line">            <span class="string">"value"</span>: <span class="string">"Female"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"race"</span>: &#123;<span class="comment">//包含人种分析结果，value的值为Asian/White/Black, confidence表示置信度</span></div><div class="line">            <span class="string">"confidence"</span>: <span class="number">99.818</span>,</div><div class="line">            <span class="string">"value"</span>: <span class="string">"Asian"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"smiling"</span>: &#123;<span class="comment">//包含微笑程度分析结果，value的值为0－100的实数，越大表示微笑程度越高</span></div><div class="line">            <span class="string">"value"</span>: <span class="number">8.14031</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">      <span class="string">"face_id"</span>: <span class="string">"62bed8c94bbf92323675943328aed269"</span>,</div><div class="line">      <span class="string">"position"</span>: &#123;</div><div class="line">          <span class="string">"center"</span>: &#123;<span class="comment">//检出的人脸框的中心点坐标, x &amp; y 坐标分别表示在图片中的宽度和高度的百分比 (0~100之间的实数)</span></div><div class="line">              <span class="string">"x"</span>: <span class="number">49.731183</span>,</div><div class="line">              <span class="string">"y"</span>: <span class="number">32.5</span></div><div class="line">          &#125;,</div><div class="line">          <span class="string">"eye_left"</span>: &#123;<span class="comment">//相应人脸的左眼坐标，x &amp; y 坐标分别表示在图片中的宽度和高度的百分比 (0~100之间的实数)</span></div><div class="line">              <span class="string">"x"</span>: <span class="number">43.148441</span>,</div><div class="line">              <span class="string">"y"</span>: <span class="number">28.722909</span></div><div class="line">          &#125;,</div><div class="line">          <span class="string">"eye_right"</span>: &#123;<span class="comment">//相应人脸的右眼坐标，x &amp; y 坐标分别表示在图片中的宽度和高度的百分比 (0~100之间的实数)</span></div><div class="line">              <span class="string">"x"</span>: <span class="number">55.413441</span>,</div><div class="line">              <span class="string">"y"</span>: <span class="number">27.745455</span></div><div class="line">          &#125;,</div><div class="line">          <span class="string">"height"</span>: <span class="number">21.363636</span>, <span class="comment">//0~100之间的实数，表示检出的脸的高度在图片中百分比</span></div><div class="line">          <span class="string">"mouth_left"</span>: &#123;<span class="comment">//相应人脸的左侧嘴角坐标，x &amp; y 坐标分别表示在图片中的宽度和高度的百分比 (0~100之间的实数)</span></div><div class="line">              <span class="string">"x"</span>: <span class="number">46.193978</span>,</div><div class="line">              <span class="string">"y"</span>: <span class="number">39.472682</span></div><div class="line">          &#125;,</div><div class="line">          <span class="string">"mouth_right"</span>: &#123;<span class="comment">//相应人脸的右侧嘴角坐标，x &amp; y 坐标分别表示在图片中的宽度和高度的百分比 (0~100之间的实数)</span></div><div class="line">              <span class="string">"x"</span>: <span class="number">54.952688</span>,</div><div class="line">              <span class="string">"y"</span>: <span class="number">38.989955</span></div><div class="line">          &#125;,</div><div class="line">          <span class="string">"nose"</span>: &#123;<span class="comment">//相应人脸的鼻尖坐标，x &amp; y 坐标分别表示在图片中的宽度和高度的百分比 (0~100之间的实数)</span></div><div class="line">              <span class="string">"x"</span>: <span class="number">50.23414</span>,                    </div><div class="line">              <span class="string">"y"</span>: <span class="number">34.953727</span>                </div><div class="line">          &#125;,                </div><div class="line">          <span class="string">"width"</span>: <span class="number">25.268817</span> <span class="comment">//0~100之间的实数，表示检出的脸的宽度在图片中百分比            </span></div><div class="line">      &#125;,            </div><div class="line">      <span class="string">"tag"</span>: <span class="string">""</span>        </div><div class="line">    &#125;],</div><div class="line">    <span class="string">"img_height"</span>: <span class="number">220</span>,</div><div class="line">    <span class="string">"img_id"</span>: <span class="string">"064aae142ef977bb44b6cc3dd9a6eeb1"</span>,    </div><div class="line">    <span class="string">"img_width"</span>: <span class="number">186</span>,    </div><div class="line">    <span class="string">"session_id"</span>: <span class="string">"ade961e7b0d347ca943e0f0f752f7cc5"</span>,    </div><div class="line">    <span class="string">"url"</span>: null</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-对检测结果进行处理"><a href="#4-对检测结果进行处理" class="headerlink" title="4. 对检测结果进行处理"></a>4. 对检测结果进行处理</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)didFinishDetection:(FaceppResult *)result&#123;</div><div class="line">    <span class="built_in">NSDictionary</span> *face = [result content][<span class="string">@"face"</span>][<span class="number">0</span>];</div><div class="line">    [<span class="keyword">self</span> markTheFiveSenseOrgansWithData:face];</div><div class="line">    [<span class="keyword">self</span> markFaceWithData:face];</div><div class="line">    [<span class="keyword">self</span> analysisPersonWithData:face];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1) 标记脸部范围</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)markFaceWithData:(<span class="built_in">NSDictionary</span> *)face&#123;</div><div class="line">    <span class="built_in">CGFloat</span> img_width = _imgView.frame.size.width;</div><div class="line">    <span class="built_in">CGFloat</span> img_height = _imgView.frame.size.height;</div><div class="line">    <span class="built_in">CGFloat</span> center_x = [face[<span class="string">@"position"</span>][<span class="string">@"center"</span>][<span class="string">@"x"</span>] floatValue] / <span class="number">100.</span>f * img_width;<span class="comment">//脸部中心点x坐标</span></div><div class="line">    <span class="built_in">CGFloat</span> center_y = [face[<span class="string">@"position"</span>][<span class="string">@"center"</span>][<span class="string">@"y"</span>] floatValue] / <span class="number">100.</span>f * img_height;<span class="comment">//脸部中心点y坐标</span></div><div class="line">    <span class="built_in">CGFloat</span> width = [face[<span class="string">@"position"</span>][<span class="string">@"width"</span>] floatValue] / <span class="number">100.</span>f * img_width;<span class="comment">//脸部宽度</span></div><div class="line">    <span class="built_in">CGFloat</span> height = [face[<span class="string">@"position"</span>][<span class="string">@"height"</span>] floatValue] / <span class="number">100.</span>f * img_height;<span class="comment">//脸部高度</span></div><div class="line">    <span class="built_in">CGPoint</span> center = <span class="built_in">CGPointMake</span>(center_x, center_y);    </div><div class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line">    <span class="comment">//自定义一个CALayer,画一个矩形</span></div><div class="line">    RectLayer *rectLayer = [RectLayer layer];</div><div class="line">    rectLayer.bounds = rect;</div><div class="line">    rectLayer.position = center;</div><div class="line">    [rectLayer setNeedsDisplayInRect:rect];</div><div class="line">    [<span class="keyword">self</span>.imgView.layer addSublayer:rectLayer];     <span class="comment">//自定义一个CALayer,画一个矩形</span></div><div class="line">    [rectLayer twinkleAnimation:<span class="number">3</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2) 标记五官</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)markTheFiveSenseOrgansWithData:(<span class="built_in">NSDictionary</span> *)face&#123;</div><div class="line">    <span class="built_in">CGFloat</span> img_width = _imgView.frame.size.width;</div><div class="line">    <span class="built_in">CGFloat</span> img_height = _imgView.frame.size.height;</div><div class="line">    <span class="built_in">CGFloat</span> eye_left_x = [face[<span class="string">@"position"</span>][<span class="string">@"eye_left"</span>][<span class="string">@"x"</span>] floatValue] / <span class="number">100.</span>f * img_width;</div><div class="line">    <span class="built_in">CGFloat</span> eye_left_y = [face[<span class="string">@"position"</span>][<span class="string">@"eye_left"</span>][<span class="string">@"y"</span>] floatValue] / <span class="number">100.</span>f * img_height;</div><div class="line">    <span class="built_in">CGFloat</span> eye_right_x = [face[<span class="string">@"position"</span>][<span class="string">@"eye_right"</span>][<span class="string">@"x"</span>] floatValue] / <span class="number">100.</span>f * img_width;</div><div class="line">    <span class="built_in">CGFloat</span> eye_right_y = [face[<span class="string">@"position"</span>][<span class="string">@"eye_right"</span>][<span class="string">@"y"</span>] floatValue] / <span class="number">100.</span>f * img_height;</div><div class="line">    <span class="built_in">CGFloat</span> mouth_left_x = [face[<span class="string">@"position"</span>][<span class="string">@"mouth_left"</span>][<span class="string">@"x"</span>] floatValue] / <span class="number">100.</span>f * img_width;</div><div class="line">    <span class="built_in">CGFloat</span> mouth_left_y = [face[<span class="string">@"position"</span>][<span class="string">@"mouth_left"</span>][<span class="string">@"y"</span>] floatValue] / <span class="number">100.</span>f * img_height;</div><div class="line">    <span class="built_in">CGFloat</span> mouth_right_x = [face[<span class="string">@"position"</span>][<span class="string">@"mouth_right"</span>][<span class="string">@"x"</span>] floatValue] / <span class="number">100.</span>f * img_width;</div><div class="line">    <span class="built_in">CGFloat</span> mouth_right_y = [face[<span class="string">@"position"</span>][<span class="string">@"mouth_right"</span>][<span class="string">@"y"</span>] floatValue] / <span class="number">100.</span>f * img_height;</div><div class="line">    <span class="built_in">CGFloat</span> nose_x = [face[<span class="string">@"position"</span>][<span class="string">@"nose"</span>][<span class="string">@"x"</span>] floatValue] / <span class="number">100.</span>f * img_width;</div><div class="line">    <span class="built_in">CGFloat</span> nose_y = [face[<span class="string">@"position"</span>][<span class="string">@"nose"</span>][<span class="string">@"y"</span>] floatValue] / <span class="number">100.</span>f * img_height;</div><div class="line">    <span class="comment">//标注左眼</span></div><div class="line">    <span class="built_in">CALayer</span> *leftEyeLayer = [<span class="built_in">CALayer</span> layer];</div><div class="line">    leftEyeLayer.frame = <span class="built_in">CGRectMake</span>(eye_left_x, eye_left_y, <span class="number">2</span>, <span class="number">2</span>);</div><div class="line">    leftEyeLayer.backgroundColor = [<span class="built_in">UIColor</span> greenColor].CGColor;</div><div class="line">    [leftEyeLayer setNeedsDisplay];</div><div class="line">    [<span class="keyword">self</span>.imgView.layer addSublayer:leftEyeLayer];</div><div class="line">    </div><div class="line">    <span class="comment">//标注右眼    CALayer *rightEyeLayer = [CALayer layer];</span></div><div class="line">    rightEyeLayer.frame = <span class="built_in">CGRectMake</span>(eye_right_x, eye_right_y, <span class="number">2</span>, <span class="number">2</span>);</div><div class="line">    rightEyeLayer.backgroundColor = [<span class="built_in">UIColor</span> greenColor].CGColor;</div><div class="line">    [rightEyeLayer setNeedsDisplay];</div><div class="line">    [<span class="keyword">self</span>.imgView.layer addSublayer:rightEyeLayer];</div><div class="line">    [leftEyeLayer twinkleAnimation:<span class="number">3</span>];</div><div class="line">    [rightEyeLayer twinkleAnimation:<span class="number">3</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//标注鼻子</span></div><div class="line">    RoundLayer *noseLayer = [RoundLayer layer];</div><div class="line">    noseLayer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">20</span>);</div><div class="line">    noseLayer.position = <span class="built_in">CGPointMake</span>(nose_x, nose_y);</div><div class="line">    [noseLayer setNeedsDisplay];</div><div class="line">    [<span class="keyword">self</span>.imgView.layer addSublayer:noseLayer];</div><div class="line">    [noseLayer twinkleAnimation:<span class="number">3</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//标注嘴巴</span></div><div class="line">    RectLayer *mouthLayer = [RectLayer layer];</div><div class="line">    mouthLayer.frame = <span class="built_in">CGRectMake</span>(mouth_left_x, mouth_left_y, mouth_right_x - mouth_left_x, mouth_right_y - mouth_left_y);</div><div class="line">    [mouthLayer setNeedsDisplay];</div><div class="line">    [<span class="keyword">self</span>.imgView.layer addSublayer:mouthLayer];</div><div class="line">    [mouthLayer twinkleAnimation:<span class="number">3</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3) 分析人物特征</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)analysisPersonWithData:(<span class="built_in">NSDictionary</span> *)face&#123;</div><div class="line">    <span class="built_in">CGFloat</span> smiling = [face[<span class="string">@"attribute"</span>][<span class="string">@"smiling"</span>][<span class="string">@"value"</span>] floatValue];<span class="comment">//笑容</span></div><div class="line">    <span class="built_in">NSInteger</span> age_value = [face[<span class="string">@"attribute"</span>][<span class="string">@"age"</span>][<span class="string">@"value"</span>] integerValue];<span class="comment">//年龄</span></div><div class="line">    <span class="built_in">NSInteger</span> age_range = [face[<span class="string">@"attribute"</span>][<span class="string">@"age"</span>][<span class="string">@"range"</span>] integerValue];<span class="comment">//年龄误差</span></div><div class="line">    <span class="built_in">NSString</span> *gender = face[<span class="string">@"attribute"</span>][<span class="string">@"gender"</span>][<span class="string">@"value"</span>];<span class="comment">//性别</span></div><div class="line">    <span class="built_in">NSString</span> *race = face[<span class="string">@"attribute"</span>][<span class="string">@"race"</span>][<span class="string">@"value"</span>];<span class="comment">//种族</span></div><div class="line">    <span class="built_in">NSArray</span> *texts = @[[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"开心度：%@"</span>, @(smiling).stringValue],</div><div class="line">                       [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"年龄：%ld - %ld"</span>,age_value - age_range, age_value + age_range],</div><div class="line">                       [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"性别：%@"</span>, gender],</div><div class="line">                       [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"种族：%@"</span>, race]];</div><div class="line">    <span class="built_in">CGFloat</span> width = <span class="keyword">self</span>.view.width - <span class="number">40</span>;</div><div class="line">    <span class="built_in">CGFloat</span> height = <span class="number">20</span>;</div><div class="line">    <span class="built_in">CGFloat</span> x = <span class="number">20</span>;</div><div class="line">    <span class="built_in">CGFloat</span> margin = <span class="number">10</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">        <span class="built_in">CGFloat</span> y = _imgView.height + _imgView.y + height * i + margin * (i + <span class="number">1</span>);</div><div class="line">        <span class="built_in">UILabel</span> *label = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(x, y, width, height)];</div><div class="line">        label.text = texts[i];</div><div class="line">        [<span class="keyword">self</span>.view addSubview:label];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="5-自定义layer"><a href="#5-自定义layer" class="headerlink" title="5. 自定义layer"></a>5. 自定义layer</h5><p>1）RectLayer重写drawInContext方法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawInContext:(<span class="built_in">CGContextRef</span>)ctx&#123;</div><div class="line">    <span class="comment">//1.绘制图形</span></div><div class="line">    <span class="comment">//画一个矩形</span></div><div class="line">    <span class="built_in">CGContextAddRect</span>(ctx, <span class="keyword">self</span>.bounds);</div><div class="line">    <span class="comment">//设置属性（颜色）</span></div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">2</span>);</div><div class="line">    <span class="built_in">CGContextSetRGBStrokeColor</span>(ctx, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    <span class="comment">//2.渲染</span></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2）RoundLayer重写drawInContext方法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)drawInContext:(<span class="built_in">CGContextRef</span>)ctx&#123;</div><div class="line">    <span class="built_in">CGContextAddEllipseInRect</span>(ctx, <span class="keyword">self</span>.bounds);</div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">2</span>);</div><div class="line">    <span class="built_in">CGContextSetRGBStrokeColor</span>(ctx, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    <span class="built_in">CGContextStrokePath</span>(ctx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="6-创建CALayer类别，管理layer动画"><a href="#6-创建CALayer类别，管理layer动画" class="headerlink" title="6. 创建CALayer类别，管理layer动画"></a>6. 创建CALayer类别，管理layer动画</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"CALayer+Animation.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CALayer</span> (<span class="title">Animation</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)twinkleAnimation:(<span class="keyword">float</span>)time&#123;</div><div class="line">    <span class="built_in">CABasicAnimation</span> *animation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"opacity"</span>];</div><div class="line">    animation.fromValue = @[@<span class="number">1.0</span>f];</div><div class="line">    animation.toValue = @[@<span class="number">0.0</span>f];</div><div class="line">    animation.autoreverses = <span class="literal">YES</span>;</div><div class="line">    animation.duration = time * <span class="number">0.1</span>;</div><div class="line">    animation.repeatCount = time - <span class="number">1</span>;</div><div class="line">    animation.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">    animation.fillMode = kCAFillModeForwards;</div><div class="line">    [<span class="keyword">self</span> addAnimation:animation forKey:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
]]></content:encoded>
      
      <comments>gofee.me/2016/11/30/face-recognition-02/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
